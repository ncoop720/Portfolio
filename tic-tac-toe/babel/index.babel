var gameState;
var gameStateID = ["space1", "space2", "space3", "space4", "space5", "space6", "space7", "space8", "space9"];
var mySelector = "X";
var compSelector = "O";
var myTurn;

$(document).ready(function() {
  resetGame();
  $("#xButton").addClass("selected");
});

//renders the board from an array
function renderBoard(arr) {
  class Board extends React.Component {
    render() {
      return (
        <div id="gameBoard">
          <div id="row1" className="boardRow">
            <button onClick={() => userSpace("space1")} id="space1" className="gameSpace">{arr[0]}</button>
            <button onClick={() => userSpace("space2")} id="space2" className="gameSpace">{arr[1]}</button>
            <button onClick={() => userSpace("space3")} id="space3" className="gameSpace">{arr[2]}</button>
          </div>
          <div id="row2" className="boardRow">
            <button onClick={() => userSpace("space4")} id="space4" className="gameSpace">{arr[3]}</button>
            <button onClick={() => userSpace("space5")} id="space5" className="gameSpace">{arr[4]}</button>
            <button onClick={() => userSpace("space6")} id="space6" className="gameSpace">{arr[5]}</button>
          </div>
          <div id="row3" className="boardRow">
            <button onClick={() => userSpace("space7")} id="space7" className="gameSpace">{arr[6]}</button>
            <button onClick={() => userSpace("space8")} id="space8" className="gameSpace">{arr[7]}</button>
            <button onClick={() => userSpace("space9")} id="space9" className="gameSpace">{arr[8]}</button>
          </div>
        </div>
      );
    }
  }
  
  ReactDOM.render(
    <Board />,
    document.getElementById("boardDestination")
  );
}

//prints a message depending on who goes first
class First extends React.Component {
  render() {
    return <p>{this.props.message}</p>
  }
}

//randomly chooses who goes first
function whoGoesFirst(){
  if (Math.random()<0.5) {
    myTurn = true;
    ReactDOM.render(
      <First message="You go first!" />,
      document.getElementById("whoGoesFirst")
    );
  }
  else {
    myTurn = false;
    computerSpace();
    ReactDOM.render(
      <First message="Computer goes first!" />,
      document.getElementById("whoGoesFirst")
    );
  }
  
}



//click function for the game board
function userSpace(clickedID) {
  if (myTurn) {
    //place mySelector if space is empty
    for (var i=0; i<gameStateID.length; i++) {
      if (gameStateID[i]==clickedID && gameState[i]=="") {
        myTurn = false;
        gameState[i] = mySelector;
        renderBoard(gameState);
        
        //if you win
        if ((gameState[0]!=="" && gameState[0]==gameState[1] && gameState[0]==gameState[2]) || (gameState[3]!=="" && gameState[3]==gameState[4] && gameState[3]==gameState[5]) || (gameState[6]!=="" && gameState[6]==gameState[7] && gameState[6]==gameState[8]) || (gameState[0]!=="" && gameState[0]==gameState[3] && gameState[0]==gameState[6]) || (gameState[1]!=="" && gameState[1]==gameState[4] && gameState[1]==gameState[7]) || (gameState[2]!=="" && gameState[2]==gameState[5] && gameState[2]==gameState[8]) || (gameState[0]!=="" && gameState[0]==gameState[4] && gameState[0]==gameState[8]) || (gameState[2]!=="" && gameState[2]==gameState[4] && gameState[2]==gameState[6])) {
          $("#reset").addClass("noticeMe");
          return;
        }
        
        //count number of occupied spaces
        var j=0;
        for (var i=0; i<gameState.length; i++) {
          if (gameState[i]!=="") {
            j++;
          }
        }
        //if all spaces occupied, light up reset button
        if (j==9) {
          $("#reset").addClass("noticeMe");
          return;
        }
        
        //computer's turn
        computerSpace();
      }
    }
  }
}

//computer AI
function computerSpace() {
  //count number of occupied spaces
  var j=0;
  for (var i=0; i<gameState.length; i++) {
    if (gameState[i]!=="") {
      j++;
    }
  }
  
  //if total occupied spaces equals 1 less than max, light up reset button
  if (j==8) {
    setTimeout('$("#reset").addClass("noticeMe")', 500);
  }
  
  //check for winning play
  for (var i=0; i< gameState.length; i++) {
    if (gameState[i]=="") {
      gameState[i] = compSelector;
      if ((gameState[0]!=="" && gameState[0]==gameState[1] && gameState[0]==gameState[2]) || (gameState[3]!=="" && gameState[3]==gameState[4] && gameState[3]==gameState[5]) || (gameState[6]!=="" && gameState[6]==gameState[7] && gameState[6]==gameState[8]) || (gameState[0]!=="" && gameState[0]==gameState[3] && gameState[0]==gameState[6]) || (gameState[1]!=="" && gameState[1]==gameState[4] && gameState[1]==gameState[7]) || (gameState[2]!=="" && gameState[2]==gameState[5] && gameState[2]==gameState[8]) || (gameState[0]!=="" && gameState[0]==gameState[4] && gameState[0]==gameState[8]) || (gameState[2]!=="" && gameState[2]==gameState[4] && gameState[2]==gameState[6])) {
        setTimeout("renderBoard(gameState)", 500);
        setTimeout('$("#reset").addClass("noticeMe")', 500);
        return;
      }
      else {
        gameState[i] = "";
      }
    }
  }
  
  //stop opponent's winning play
  for (var i=0; i<gameState.length; i++) {
    if (gameState[i]=="") {
      gameState[i] = mySelector;
      if ((gameState[0]!=="" && gameState[0]==gameState[1] && gameState[0]==gameState[2]) || (gameState[3]!=="" && gameState[3]==gameState[4] && gameState[3]==gameState[5]) || (gameState[6]!=="" && gameState[6]==gameState[7] && gameState[6]==gameState[8]) || (gameState[0]!=="" && gameState[0]==gameState[3] && gameState[0]==gameState[6]) || (gameState[1]!=="" && gameState[1]==gameState[4] && gameState[1]==gameState[7]) || (gameState[2]!=="" && gameState[2]==gameState[5] && gameState[2]==gameState[8]) || (gameState[0]!=="" && gameState[0]==gameState[4] && gameState[0]==gameState[8]) || (gameState[2]!=="" && gameState[2]==gameState[4] && gameState[2]==gameState[6])) {
        gameState[i] = compSelector;
        setTimeout("renderBoard(gameState)", 500);
        myTurn = true;
        return;
      }
      else {
        gameState[i] = "";
      }
    }
  }
  
  //go middle if opponent went first
  if (j==1 && gameState[4]=="") {
    gameState[4] = compSelector;
    setTimeout("renderBoard(gameState)", 500);
    myTurn = true;
    return;
  }
  
  //place side if opponent holds two opposite corners
  var side = [1, 3, 5, 7];
  if ((gameState[0]==mySelector && gameState[8]==mySelector) || (gameState[2]==mySelector && gameState[6]==mySelector)) {
    for (var i=0; i<side.length; i++){
      if (gameState[side[i]]==""){
        gameState[side[i]] = compSelector;
        setTimeout("renderBoard(gameState)", 500);
        myTurn = true;
        return;
      }
    }
  }
  
  //place opposite of owned corner
  if (gameState[0]=="" && gameState[8]==compSelector) {
    gameState[0] = compSelector;
    setTimeout("renderBoard(gameState)", 500);
    myTurn = true;
    return; 
  }
  if (gameState[2]=="" && gameState[6]==compSelector) {
    gameState[2] = compSelector;
    setTimeout("renderBoard(gameState)", 500);
    myTurn = true;
    return;
  }
  if (gameState[6]=="" && gameState[2]==compSelector) {
    gameState[6] = compSelector;
    setTimeout("renderBoard(gameState)", 500);
    myTurn = true;
    return;
  }
  if (gameState[8]=="" && gameState[0]==compSelector) {
    gameState[8] = compSelector;
    setTimeout("renderBoard(gameState)", 500);
    myTurn = true;
    return;
  }
  
  //place side if number of occupied spaces >=5
  for (var i=0; i<side.length; i++){
    if (gameState[side[i]]=="" && j>=5){
      gameState[side[i]] = compSelector;
      setTimeout("renderBoard(gameState)", 500);
      myTurn = true;
      return;
    }
  }
  
  //place corner
  var corner= [0, 2, 6, 8];
  for (var i=0; i<corner.length; i++){
    if (gameState[corner[i]]==""){
      gameState[corner[i]] = compSelector;
      setTimeout("renderBoard(gameState)", 500);
      myTurn = true;
      return;
    }
  }
  
  //place middle
  if (gameState[4]=="") {
    gameState[4] = compSelector;
    setTimeout("renderBoard(gameState)", 500);
    myTurn = true;
    return;
  }
  
  //place side
  for (var i=0; i<side.length; i++){
    if (gameState[side[i]]==""){
      gameState[side[i]] = compSelector;
      setTimeout("renderBoard(gameState)", 500);
      myTurn = true;
      return;
    }
  }  
}

//clears board and starts new game
function resetGame() {
  gameState = ["", "", "", "", "", "", "", "", ""];
  $("#reset").removeClass("noticeMe");
  renderBoard(gameState);
  whoGoesFirst();
}

//when you press the x button
function xButton() {
  $("#oButton").removeClass("selected");
  $("#xButton").addClass("selected");
  mySelector = "X";
  compSelector = "O";
  resetGame();
}

//when you press the o button
function oButton() {
  $("#xButton").removeClass("selected");
  $("#oButton").addClass("selected");
  mySelector = "O";
  compSelector = "X";
  resetGame();
}